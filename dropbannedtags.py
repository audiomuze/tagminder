import sqlite3

conn = sqlite3.connect("qnap.db")
dbcursor = conn.cursor()

query1 = ("drop table if exists permitted_tags;")
query2 = ("create table permitted_tags ( tagname text);")
query3 = ("DROP TRIGGER IF EXISTS sqlmods")
query4 = ("CREATE TRIGGER sqlmods AFTER UPDATE ON alib FOR EACH ROW WHEN old.sqlmodded IS NULL BEGIN UPDATE alib SET sqlmodded = '1' WHERE rowid = NEW.rowid; END;")
query5 = ("SELECT name FROM PRAGMA_TABLE_INFO('alib') t1 left join permitted_tags t2 on t2.tagname = t1.name WHERE t2.tagname IS NULL")
query6 = (f"UPDATE alib SET performer = NULL WHERE performer = artist;")

query96 = (f"SELECT COUNT(*) from alib where sqlmodded = '1'")
query97 = (f"SELECT DISTINCT __dirpath FROM alib where sqlmodded = '1'")
query98 = (f"DROP TABLE IF EXISTS changed_tags;")
query99 = (f"CREATE TABLE changed_tags AS SELECT * FROM alib WHERE sqlmodded = '1';")
query100 = (f"UPDATE changed_tags SET sqlmodded = NULL;")

dbcursor.execute(query1)
dbcursor.execute(query2)
conn.commit()

dbcursor.execute('insert into permitted_tags ( tagname ) values ("__accessed")')
dbcursor.execute('insert into permitted_tags ( tagname ) values ("__app")')
dbcursor.execute('insert into permitted_tags ( tagname ) values ("__bitrate")')
dbcursor.execute('insert into permitted_tags ( tagname ) values ("__bitrate_num")')
dbcursor.execute('insert into permitted_tags ( tagname ) values ("__bitspersample")')
dbcursor.execute('insert into permitted_tags ( tagname ) values ("__channels")')
dbcursor.execute('insert into permitted_tags ( tagname ) values ("__created")')
dbcursor.execute('insert into permitted_tags ( tagname ) values ("__dirname")')
dbcursor.execute('insert into permitted_tags ( tagname ) values ("__dirpath")')
dbcursor.execute('insert into permitted_tags ( tagname ) values ("__ext")')
dbcursor.execute('insert into permitted_tags ( tagname ) values ("__file_access_date")')
dbcursor.execute('insert into permitted_tags ( tagname ) values ("__file_access_datetime")')
dbcursor.execute('insert into permitted_tags ( tagname ) values ("__file_access_datetime_raw")')
dbcursor.execute('insert into permitted_tags ( tagname ) values ("__file_create_date")')
dbcursor.execute('insert into permitted_tags ( tagname ) values ("__file_create_datetime")')
dbcursor.execute('insert into permitted_tags ( tagname ) values ("__file_create_datetime_raw")')
dbcursor.execute('insert into permitted_tags ( tagname ) values ("__file_mod_date")')
dbcursor.execute('insert into permitted_tags ( tagname ) values ("__file_mod_datetime")')
dbcursor.execute('insert into permitted_tags ( tagname ) values ("__file_mod_datetime_raw")')
dbcursor.execute('insert into permitted_tags ( tagname ) values ("__file_size")')
dbcursor.execute('insert into permitted_tags ( tagname ) values ("__file_size_bytes")')
dbcursor.execute('insert into permitted_tags ( tagname ) values ("__file_size_kb")')
dbcursor.execute('insert into permitted_tags ( tagname ) values ("__file_size_mb")')
dbcursor.execute('insert into permitted_tags ( tagname ) values ("__filename")')
dbcursor.execute('insert into permitted_tags ( tagname ) values ("__filename_no_ext")')
dbcursor.execute('insert into permitted_tags ( tagname ) values ("__filetype")')
dbcursor.execute('insert into permitted_tags ( tagname ) values ("__frequency")')
dbcursor.execute('insert into permitted_tags ( tagname ) values ("__frequency_num")')
dbcursor.execute('insert into permitted_tags ( tagname ) values ("__image_mimetype")')
dbcursor.execute('insert into permitted_tags ( tagname ) values ("__image_type")')
dbcursor.execute('insert into permitted_tags ( tagname ) values ("__layer")')
dbcursor.execute('insert into permitted_tags ( tagname ) values ("__length")')
dbcursor.execute('insert into permitted_tags ( tagname ) values ("__length_seconds")')
dbcursor.execute('insert into permitted_tags ( tagname ) values ("__md5sig")')
dbcursor.execute('insert into permitted_tags ( tagname ) values ("__mode")')
dbcursor.execute('insert into permitted_tags ( tagname ) values ("__modified")')
dbcursor.execute('insert into permitted_tags ( tagname ) values ("__num_images")')
dbcursor.execute('insert into permitted_tags ( tagname ) values ("__parent_dir")')
dbcursor.execute('insert into permitted_tags ( tagname ) values ("__path")')
dbcursor.execute('insert into permitted_tags ( tagname ) values ("__size")')
dbcursor.execute('insert into permitted_tags ( tagname ) values ("__tag")')
dbcursor.execute('insert into permitted_tags ( tagname ) values ("__tag_read")')
dbcursor.execute('insert into permitted_tags ( tagname ) values ("__version")')
dbcursor.execute('insert into permitted_tags ( tagname ) values ("_releasecomment")')
dbcursor.execute('insert into permitted_tags ( tagname ) values ("acousticbrainz_mood")')
dbcursor.execute('insert into permitted_tags ( tagname ) values ("acoustid_fingerprint")')
dbcursor.execute('insert into permitted_tags ( tagname ) values ("acoustid_id")')
dbcursor.execute('insert into permitted_tags ( tagname ) values ("album")')
dbcursor.execute('insert into permitted_tags ( tagname ) values ("albumartist")')
dbcursor.execute('insert into permitted_tags ( tagname ) values ("amg_album_id")')
dbcursor.execute('insert into permitted_tags ( tagname ) values ("amg_boxset_url")')
dbcursor.execute('insert into permitted_tags ( tagname ) values ("amg_url")')
dbcursor.execute('insert into permitted_tags ( tagname ) values ("amgtagged")')
dbcursor.execute('insert into permitted_tags ( tagname ) values ("analysis")')
dbcursor.execute('insert into permitted_tags ( tagname ) values ("arranger")')
dbcursor.execute('insert into permitted_tags ( tagname ) values ("artist")')
dbcursor.execute('insert into permitted_tags ( tagname ) values ("asin")')
dbcursor.execute('insert into permitted_tags ( tagname ) values ("barcode")')
dbcursor.execute('insert into permitted_tags ( tagname ) values ("bootleg")')
dbcursor.execute('insert into permitted_tags ( tagname ) values ("catalog")')
dbcursor.execute('insert into permitted_tags ( tagname ) values ("catalognumber")')
dbcursor.execute('insert into permitted_tags ( tagname ) values ("compilation")')
dbcursor.execute('insert into permitted_tags ( tagname ) values ("composer")')
dbcursor.execute('insert into permitted_tags ( tagname ) values ("conductor")')
dbcursor.execute('insert into permitted_tags ( tagname ) values ("country")')
dbcursor.execute('insert into permitted_tags ( tagname ) values ("discnumber")')
dbcursor.execute('insert into permitted_tags ( tagname ) values ("discogs_artist_url")')
dbcursor.execute('insert into permitted_tags ( tagname ) values ("discogs_release_url")')
dbcursor.execute('insert into permitted_tags ( tagname ) values ("discsubtitle")')
dbcursor.execute('insert into permitted_tags ( tagname ) values ("engineer")')
dbcursor.execute('insert into permitted_tags ( tagname ) values ("ensemble")')
dbcursor.execute('insert into permitted_tags ( tagname ) values ("fingerprint")')
dbcursor.execute('insert into permitted_tags ( tagname ) values ("genre")')
dbcursor.execute('insert into permitted_tags ( tagname ) values ("isrc")')
dbcursor.execute('insert into permitted_tags ( tagname ) values ("label")')
dbcursor.execute('insert into permitted_tags ( tagname ) values ("live")')
dbcursor.execute('insert into permitted_tags ( tagname ) values ("lyricist")')
dbcursor.execute('insert into permitted_tags ( tagname ) values ("lyrics")')
dbcursor.execute('insert into permitted_tags ( tagname ) values ("mixer")')
dbcursor.execute('insert into permitted_tags ( tagname ) values ("mood")')
dbcursor.execute('insert into permitted_tags ( tagname ) values ("musicbrainz_albumartistid")')
dbcursor.execute('insert into permitted_tags ( tagname ) values ("musicbrainz_albumid")')
dbcursor.execute('insert into permitted_tags ( tagname ) values ("musicbrainz_artistid")')
dbcursor.execute('insert into permitted_tags ( tagname ) values ("musicbrainz_discid")')
dbcursor.execute('insert into permitted_tags ( tagname ) values ("musicbrainz_releasegroupid")')
dbcursor.execute('insert into permitted_tags ( tagname ) values ("musicbrainz_releasetrackid")')
dbcursor.execute('insert into permitted_tags ( tagname ) values ("musicbrainz_trackid")')
dbcursor.execute('insert into permitted_tags ( tagname ) values ("musicbrainz_workid")')
dbcursor.execute('insert into permitted_tags ( tagname ) values ("originaldate")')
dbcursor.execute('insert into permitted_tags ( tagname ) values ("originalreleasedate")')
dbcursor.execute('insert into permitted_tags ( tagname ) values ("originalyear")')
dbcursor.execute('insert into permitted_tags ( tagname ) values ("part")')
dbcursor.execute('insert into permitted_tags ( tagname ) values ("performancedate")')
dbcursor.execute('insert into permitted_tags ( tagname ) values ("performer")')
dbcursor.execute('insert into permitted_tags ( tagname ) values ("personnel")')
dbcursor.execute('insert into permitted_tags ( tagname ) values ("producer")')
dbcursor.execute('insert into permitted_tags ( tagname ) values ("rating")')
dbcursor.execute('insert into permitted_tags ( tagname ) values ("recordinglocation")')
dbcursor.execute('insert into permitted_tags ( tagname ) values ("recordingstartdate")')
dbcursor.execute('insert into permitted_tags ( tagname ) values ("reflac")')
dbcursor.execute('insert into permitted_tags ( tagname ) values ("releasetype")')
dbcursor.execute('insert into permitted_tags ( tagname ) values ("remixer")')
dbcursor.execute('insert into permitted_tags ( tagname ) values ("replaygain_album_gain")')
dbcursor.execute('insert into permitted_tags ( tagname ) values ("replaygain_album_peak")')
dbcursor.execute('insert into permitted_tags ( tagname ) values ("replaygain_track_gain")')
dbcursor.execute('insert into permitted_tags ( tagname ) values ("replaygain_track_peak")')
dbcursor.execute('insert into permitted_tags ( tagname ) values ("review")')
dbcursor.execute('insert into permitted_tags ( tagname ) values ("roonalbumtag")')
dbcursor.execute('insert into permitted_tags ( tagname ) values ("roonradioban")')
dbcursor.execute('insert into permitted_tags ( tagname ) values ("roontracktag")')
dbcursor.execute('insert into permitted_tags ( tagname ) values ("roonid")')
dbcursor.execute('insert into permitted_tags ( tagname ) values ("sqlmodded")')
dbcursor.execute('insert into permitted_tags ( tagname ) values ("style")')
dbcursor.execute('insert into permitted_tags ( tagname ) values ("subtitle")')
dbcursor.execute('insert into permitted_tags ( tagname ) values ("theme")')
dbcursor.execute('insert into permitted_tags ( tagname ) values ("title")')
dbcursor.execute('insert into permitted_tags ( tagname ) values ("track")')
dbcursor.execute('insert into permitted_tags ( tagname ) values ("upc")')
dbcursor.execute('insert into permitted_tags ( tagname ) values ("version")')
dbcursor.execute('insert into permitted_tags ( tagname ) values ("work")')
dbcursor.execute('insert into permitted_tags ( tagname ) values ("writer")')
dbcursor.execute('insert into permitted_tags ( tagname ) values ("year")')
conn.commit()

dbcursor.execute(query3)
dbcursor.execute(query4)
dbcursor.execute(query5)
conn.commit()
bannedtags = dbcursor.fetchall()
bannedtags.sort()

for tagname in bannedtags:

	if tagname[0] != "__albumgain":

		bannedtag = '"' + tagname[0] + '"'
		dbcursor.execute(f"create index if not exists {bannedtag} on alib({bannedtag})")
		dbcursor.execute(f"select count({bannedtag}) from alib")
		tally = dbcursor.fetchall()
		print(f"{bannedtag}, {tally[-1][-1]}")
		dbcursor.execute(f"UPDATE alib set {bannedtag} = NULL WHERE {bannedtag} IS NOT NULL")
		dbcursor.execute(f"drop index if exists {bannedtag}")

conn.commit()
dbcursor.execute(query6)
dbcursor.execute(query96)
dropcount =  dbcursor.fetchall()
print(f"\nNullified {dropcount[-1][-1]} unsanctioned tags from alib")
dbcursor.execute(query97)
dirpaths = dbcursor.fetchall()
dirpaths.sort()
print(f"\nAffected albums:")
for dirpath in dirpaths:
	print(dirpath[0])

print(f"\n{len(dirpaths)} affected albums\n")
print (f"\nSQLite version {sqlite3.sqlite_version}\n")
print(f"\nGenerating changed_tags table...")
dbcursor.execute(query98)
dbcursor.execute(query99)
dbcursor.execute(query100)
print(f"\nGenerating changed_tags table...")
print(f"\nDone!")
conn.commit()
dbcursor.close()
conn.close()

